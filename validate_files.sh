#!/bin/bash

# Target branch to compare with
TARGET_BRANCH="main"

# Include and exclude lists

INCLUDE_LIST=("*.py" "*.sh" "*.js" "*.go" "*.groovy" "*.yml" "*.yaml" "*sql" "*.cpp" "*.hpp" "*.c" "*.h" "*.txt")
#("*.py" "*.js" "*.sh")  # Extensions of files you want to include
# EXCLUDE_LIST=("*.log" "*.tmp" "*.md" "golang/vendor/*")  # Extensions of files to exclude
AUTO_GENERATED_STRING=("auto generated" "code generated" "DO NOT EDIT" "do not modify" "Created by" "auto-generated" "autogenerated")
COPYRIGHT_STRING=("Copyright IBM Corp" "©️ IBM Corp." "©️ Copyright IBM Corp")

EXCLUDE_DIRS=("golang/vendor")
# Expected copyright years (array)
EXPECTED_YEAR=$(date +"%Y")

# Directories to exclude
EXCLUDE_DIRS=("golang/vendor")
# Arrays to track failed files by error type
MISSING_COPYRIGHT=()
INCORRECT_COPYRIGHT_YEAR=()

# Step 1: Get the list of changed files from git diff
CHANGED_FILES=$(git diff --name-only "$TARGET_BRANCH")

# Step 2: Function to check if a file matches a pattern
matches_pattern() {
    local file=$1
    shift
    local patterns=("$@")
    for pattern in "${patterns[@]}"; do
        if [[ $file == $pattern ]]; then
            return 0
        fi
    done
    return 1
}

# Step 3: Check if the file contains "// Code generated"
contains_generated_code() {
    local file=$1
    for string in "${AUTO_GENERATED_STRING[@]}"; do
        if grep -q "$string" "$file"; then
            return 0
        fi
    done
    return 1
}

# Step 4: Check if the file contains a copyright
contains_copyright() {
    local file=$1
    for string in "${COPYRIGHT_STRING[@]}"; do
        if grep -q "$string" "$file"; then
            return 0
        fi
    done
    return 1
}

# Step 5: Check if the copyright year is in the expected years
check_copyright_year() {
    local file=$1
    for year in "${EXPECTED_YEAR[@]}"; do
        if grep -q "Copyright.*$year" "$file"; then
            return 0
        fi
    done
    return 1
}

# Step 6: Process each changed file
for file in $CHANGED_FILES; do
    # Step 7: Skip files in the excluded directories
    for exclude_dir in "${EXCLUDE_DIRS[@]}"; do
        if [[ $file == $exclude_dir/* ]]; then
            continue 2  # Continue to the next file
        fi
    done

    # Step 9: Check against the include list
    if ! matches_pattern "$file" "${INCLUDE_LIST[@]}"; then
        continue
    fi

    # Step 10: Check if file contains "// Code generated"
    if contains_generated_code "$file"; then
        continue
    fi

    # Step 11: Check for existing copyright
    if ! contains_copyright "$file"; then
        MISSING_COPYRIGHT+=("$file")
        continue
    fi

    # Step 12: Check for correct copyright year
    if ! check_copyright_year "$file"; then
        INCORRECT_COPYRIGHT_YEAR+=("$file")
    fi
done

# Step 13: If any files failed, list them by error type
if [[ ${#MISSING_COPYRIGHT[@]} -gt 0 ]] || [[ ${#INCORRECT_COPYRIGHT_YEAR[@]} -gt 0 ]]; then
    echo "The following files failed validation:"

    if [[ ${#MISSING_COPYRIGHT[@]} -gt 0 ]]; then
        echo -e "\nMissing Copyright:"
        for file in "${MISSING_COPYRIGHT[@]}"; do
            echo "  - $file"
        done
    fi

    if [[ ${#INCORRECT_COPYRIGHT_YEAR[@]} -gt 0 ]]; then
        echo -e "\nIncorrect or Missing Copyright Year:"
        for file in "${INCORRECT_COPYRIGHT_YEAR[@]}"; do
            echo "  - $file"
        done
    fi

    exit 1
else
    echo "All files passed validation."
    exit 0
fi